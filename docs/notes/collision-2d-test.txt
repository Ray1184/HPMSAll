import java.util.ArrayList;
import java.util.List;

class BoundingCircle {
  public PVector origin;
  public float radius;


  public void set(PVector origin, float radius) {
    this.origin = origin;
    this.radius = radius;
  }

  public void render() {
    ellipseMode(CENTER);
    ellipse(origin.x, origin.y, radius * 2, radius * 2);
  }
}

List<PVector> points;
PVector[] sortedPoints = null;
int[] fx = new int[] {3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11};
int[] fy = new int[] {5, 2, 4, 3, 6, 7, 8, 9, 10, 11, 1};
int factor = 50;
boolean inside = false;
int tx = 500;
int ty = 350;
PVector mousePos = new PVector(0, 0);
PVector delta = new PVector(0, 0);
BoundingCircle aabb = new BoundingCircle();
String objData = "v -1.000000 -1.000000 0.000000"
  + "\nv 1.000000 -1.000000 0.000000"
  + "\nv -1.505155 1.137769 0.000000"
  + "\nv 3.365042 2.033271 0.000000"
  + "\nv -0.678538 3.893158 0.000000"
  + "\nv -5.408622 3.824274 0.000000"
  + "\nv -8.301780 0.265230 0.000000"
  + "\nv -5.615276 -4.097469 0.000000"
  + "\nv 7.495781 -0.102155 0.000000"
  + "\nv 6.003279 0.196345 0.000000"
  + "\nv -0.104498 -1.801312 0.000000"
  + "\nl 3 5"
  + "\nl 1 2"
  + "\nl 2 4"
  + "\nl 4 3"
  + "\nl 5 6"
  + "\nl 6 7"
  + "\nl 7 8"
  + "\nl 8 9"
  + "\nl 9 10"
  + "\nl 10 11"
  + "\nl 11 1";

PVector[] loadSortedSizesObj(String data) {
  String[] lines = data.split("\n");
  List<PVector> sortedData = new ArrayList<PVector>();
  List<PVector> vertices = new ArrayList<PVector>();
  List<PVector> sides = new ArrayList<PVector>();
  for (String line : lines) {
    char type = line.charAt(0);
    String content = line.substring(2).trim();
    String[] tokens = content.split(" ");
    switch (type) {
    case 'v':
      vertices.add(new PVector(Float.parseFloat(tokens[0]) * factor + tx, Float.parseFloat(tokens[1]) * factor + ty, Float.parseFloat(tokens[2]) * factor));
      break;
    case 'l':
      sides.add(new PVector(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1])));
      break;
    }
  }

  assert(sides.size() > 2); // at least a triangle
  Integer first = int(sides.get(0).x);
  Integer second = int(sides.get(0).y);
  PVector vertA = vertices.get(first - 1);
  PVector vertB = vertices.get(second - 1);
  Integer lastIndex = second;
  sortedData.add(vertA);
  sortedData.add(vertB);

  for (int i = 1; i < sides.size(); i++) {
    Integer next = getNextIndex(lastIndex, sides);
    PVector vert = vertices.get(next - 1);
    sortedData.add(vert);
    lastIndex = next;
  }


  return sortedData.toArray(new PVector[sortedData.size()]);
}

Integer getNextIndex(Integer index, List<PVector> sides) {

  for (PVector side : sides) {
    if (int(side.x) == index) {
      return int(side.y);
    }
  }
  println("SIDE NOT FOUND WITH INDEX " + index);
  return null;
}

void setup() {
  size(1000, 600);
  sortedPoints = loadSortedSizesObj(objData);

  noFill();
  ellipseMode(CENTER);
}

void draw() {
  background(0);
  mousePos.set(mouseX, mouseY);
  aabb.set(new PVector(mouseX, mouseY), 10);
  stroke(255);
  strokeWeight(1);
  inside = circleInsidePolygon(aabb, sortedPoints, delta);


  pushMatrix();
  if (inside) {
    stroke(255, 0, 0);
    strokeWeight(1);
  } else {
    stroke(255);
    strokeWeight(1);
  }
  for (int i = 0; i < sortedPoints.length - 1; i++) {
    line((sortedPoints[i].x), (sortedPoints[i].y), (sortedPoints[i + 1].x), (sortedPoints[i + 1].y));
  }
  aabb.render();
  popMatrix();
}


boolean circleInsidePolygon(BoundingCircle circle, PVector[] polygon, PVector t) {
  boolean inside = pointInsidePolygon(circle.origin, polygon, t);
  if (!inside) {
    return false;
  }


  for (int i = 0; i < polygon.length - 1; i++) {
    if (circleLineIntersect(polygon[i].x, polygon[i].y, polygon[i + 1].x, polygon[i + 1].y, circle.origin.x, circle.origin.y, circle.radius)) {
      println("Intersection on: [X1: " + polygon[i].x + ", Y1: " + polygon[i].y + "] - [X2: " + polygon[i + 1].x + ", Y2: " + polygon[i + 1].y + "]");
      return false;
    }
  }

  return true;
}

boolean pointInsidePolygon(PVector point, PVector[] polygon, PVector t) {

  float x = point.x - t.x;
  float y = point.y - t.y;
  int i, j = polygon.length - 1;
  boolean oddNodes = false;

  for (i = 0; i < polygon.length; i++) {
    if ((polygon[i].y < y && polygon[j].y >= y
      ||   polygon[j].y < y && polygon[i].y >= y)
      &&  (polygon[i].x <= x || polygon[j].x <= x)) {
      oddNodes ^= (polygon[i].x + (y - polygon[i].y) / (polygon[j].y - polygon[i].y) * (polygon[j].x - polygon[i].x) < x);
    }
    j = i;
  }

  return oddNodes;
}

boolean circleLineIntersect(PVector pointA, PVector pointB, PVector center, float radius) {
  float baX = pointB.x - pointA.x;
  float baY = pointB.y - pointA.y;
  float caX = center.x - pointA.x;
  float caY = center.y - pointA.y;

  float a = baX * baX + baY * baY;
  float bBy2 = baX * caX + baY * caY;
  float c = caX * caX + caY * caY - radius * radius;

  float pBy2 = bBy2 / a;
  float q = c / a;

  float disc = pBy2 * pBy2 - q;
  if (disc < 0) {
    return false;
  }
  float tmpSqrt = sqrt(disc);
  float abScalingFactor1 = -pBy2 + tmpSqrt;
  PVector pointC = new PVector(pointA.x - baX * abScalingFactor1, pointA.y - baY * abScalingFactor1);
  return isBetween(pointA, pointB, pointC);

}

boolean isBetween(PVector pt1, PVector pt2, PVector pt) {

  float epsilon = 0.001;

  if (pt.x - max(pt1.x, pt2.x) > epsilon ||
    min(pt1.x, pt2.x) - pt.x > epsilon ||
    pt.y - max(pt1.y, pt2.y) > epsilon ||
    min(pt1.y, pt2.y) - pt.y > epsilon)
    return false;

  if (abs(pt2.x - pt1.x) < epsilon)
    return abs(pt1.x - pt.x) < epsilon || abs(pt2.x - pt.x) < epsilon;
  if (abs(pt2.y - pt1.y) < epsilon)
    return abs(pt1.y - pt.y) < epsilon || abs(pt2.y - pt.y) < epsilon;

  float x = pt1.x + (pt.y - pt1.y) * (pt2.x - pt1.x) / (pt2.y - pt1.y);
  float y = pt1.y + (pt.x - pt1.x) * (pt2.y - pt1.y) / (pt2.x - pt1.x);

  return abs(pt.x - x) < epsilon || abs(pt.y - y) < epsilon;
}

boolean circleLineIntersect(float x1, float y1, float x2, float y2, float cx, float cy, float cr ) {
  return circleLineIntersect(new PVector(x1, y1), new PVector(x2, y2), new PVector(cx, cy), cr);
}

# STAMPA TUTTE LE CAMERE
import bpy


all_cams = [obj for obj in bpy.data.objects if obj.type == 'CAMERA']
print('\n\n\n\n\n\n\n\n')
for cam in all_cams:
    name = cam.name
    num = name.split('_')[1]
    print('if sampled == \'S_' + num + '\' then ')
    x = cam.location.x
    y = cam.location.y
    z = cam.location.z
    print('  cam.position = hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + ')')
    print('  light.position = hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + ')')
    r = cam.rotation_euler.to_quaternion()
    print('  cam.rotation = hpms.quat(' + str(r.w) + ', ' + str(r.x) + ', ' + str(r.y) + ', ' + str(r.z) + ')')
    print('  back' + str(num) + '.visible = true')
    print('end')

# STAMPA TUTTI I TRIGGER
import bpy


all_triggers = [obj for obj in bpy.data.objects if obj.name.split('_')[0] == 'T']
print('\n\n\n\n\n\n\n\n')
for obj in all_triggers:
    name = obj.name
    x = obj.location.x
    y = obj.location.y
    z = obj.location.z
    print('-- TRIGGER OGGETTO ' + name)
    print('trigger_dist(hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + '), 0.1, node, function()')
    print('   msg_box(....., function()')
    print('      -- TODO')
    print('   end)')
    print('end)')

# GENERA IL BOUNDING BOX DI UNA MESH PRENDENDO IL RADIUS MAGGIORE
import bpy
import math


def vec_dist(x1, y1, x2, y2):
    return math.sqrt(math.pow(x2 - x1, 2) +
                     math.pow(y2 - y1, 2) * 1.0)


def calc_bounding_radius(obj):
    p1x = obj.location.x
    p1y = obj.location.y
    p2x = obj.bound_box[0][0]
    p2y = obj.bound_box[0][1]
    return vec_dist(p1x, p1y, p2x, p2y);


obj = bpy.data.objects['DummyAnim']
print(30 * '-')
sce = bpy.context.scene
for f in range(sce.frame_start, sce.frame_end + 1):
    sce.frame_set(f)
    print("Frame %i" % f)
    print(str(calc_bounding_radius(obj)))

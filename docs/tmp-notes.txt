-- STAMPA TUTTE LE CAMERE
import bpy


all_cams = [obj for obj in bpy.data.objects if obj.type == 'CAMERA']
print('\n\n\n\n\n\n\n\n')
for cam in all_cams:
    name = cam.name
    num = name.split('_')[1]
    print('if sampled == \'S_' + num + '\' then ')
    x = cam.location.x
    y = cam.location.y
    z = cam.location.z
    print('  cam.position = hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + ')')
    print('  light.position = hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + ')')
    r = cam.rotation_euler.to_quaternion()
    print('  cam.rotation = hpms.quat(' + str(r.w) + ', ' + str(r.x) + ', ' + str(r.y) + ', ' + str(r.z) + ')')
    print('  back' + str(num) + '.visible = true')
    print('end')

-- STAMPA TUTTI I TRIGGER
import bpy


all_triggers = [obj for obj in bpy.data.objects if obj.name.split('_')[0] == 'T']
print('\n\n\n\n\n\n\n\n')
for obj in all_triggers:
    name = obj.name
    x = obj.location.x
    y = obj.location.y
    z = obj.location.z
    print('-- TRIGGER OGGETTO ' + name)
    print('trigger_dist(hpms.vec3(' + str(x) + ', ' + str(y) + ', ' + str(z) + '), 0.1, node, function()')
    print('   msg_box(....., function()')
    print('      -- TODO')
    print('   end)')
    print('end)')

-- GENERA IL BOUNDING BOX DI TUTTE LE MESHES IN SCENA
import bpy
from mathutils import Vector
from bpy import context
import numpy as np
import itertools
import bmesh

# multiply 3d coord list by matrix
def np_matmul_coords(coords, matrix, space=None):
    M = (space @ matrix @ space.inverted()
         if space else matrix).transposed()
    ones = np.ones((coords.shape[0], 1))
    coords4d = np.hstack((coords, ones))

    return np.dot(coords4d, M)[:,:-1]
    return coords4d[:,:-1]

# get the global coordinates of all object bounding box corners
# o = bpy.data.objects['DummyAnim']
objs = [o for o in bpy.data.objects if o.type == 'MESH']
for o in objs:
    coords = np.vstack(tuple(np_matmul_coords(np.array(o.bound_box), o.matrix_world.copy())))
    print('#' * 72)
    # bottom front left (all the mins)
    bfl = coords.min(axis=0)
    # top back right
    tbr = coords.max(axis=0)
    G  = np.array((bfl, tbr)).T
    # bound box coords ie the 8 combinations of bfl tbr.
    bbc = [i for i in itertools.product(*G)]


    base_bbc = np.vstack((bbc[0], bbc[2], bbc[4], bbc[6]))
    for side in base_bbc:
        print(side)


    mesh_data = bpy.data.meshes.new(o.name + '_AABB')

    mesh_data.from_pydata(base_bbc, [], [])
    mesh_data.update()

    obj = bpy.data.objects.new(o.name + '_AABB', mesh_data)

    scene = bpy.context.scene
    scene.collection.objects.link(obj)